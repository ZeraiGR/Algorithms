// SNTP

// Для того чтобы компьютеры поддерживали актуальное время, они могут обращаться к серверам точного времени SNTP (Simple Network Time Protocol). К сожалению, компьютер не может просто получить время у сервера, потому что информация по сети передаётся не мгновенно: пока сообщение с текущим временем дойдёт до компьютера, оно потеряет свою актуальность. Протокол взаимодействия клиента (компьютера, запрашивающего точное время) и сервера (компьютера, выдающего точное время) выглядит следующим образом:

// 1. Клиент отправляет запрос на сервер и запоминает время отправления A (по клиентскому времени).

// 2. Сервер получает запрос в момент времени B (по точному серверному времени) и отправляет клиенту сообщение, содержащее время B.

// 3. Клиент получает ответ на свой запрос в момент времени C (по клиентскому времени) и запоминает его. Теперь клиент, из предположения, что сетевые задержки при передаче сообщений от клиента серверу и от сервера клиенту одинаковы, может определить и установить себе точное время, используя известные значения A, B, C.

// Вам предстоит реализовать алгоритм, с точностью до секунды определяющий точное время для установки на клиенте по известным A, B и C. При необходимости округлите результат до целого числа секунд по правилам арифметики (в меньшую сторону, если дробная часть числа меньше 1/2, иначе в большую сторону).

// Возможно, что, пока клиент ожидал ответа, по клиентскому времени успели наступить новые сутки, однако известно, что между отправкой клиентом запроса и получением ответа от сервера прошло менее 24 часов.

// Формат ввода
// Программа получает на вход три временные метки A, B, C, по одной в каждой строке. Все временные метки представлены в формате «hh:mm:ss», где «hh» – это часы, «mm» – минуты, «ss» – секунды. Часы, минуты и секунды записываются ровно двумя цифрами каждое (возможно, с дополнительными нулями в начале числа).

// Формат вывода
// Программа должна вывести одну временную метку в формате, описанном во входных данных, – вычисленное точное время для установки на клиенте. В выводе не должно быть пробелов, пустых строк в начале вывода.

const fs = require('fs');

let fileContent = fs.readFileSync("input.txt", {encoding: 'utf-8'} );

let [a, b, c] = fileContent.trim().split('\n').map(t => t.trim());

function fullToSeconds (time) {
  let res = 0;
  let [h, m, s] = time.split(':').map(t => +t);
  res += h * 60 * 60;
  res += m * 60;
  res += s;
  return res;
}

function secondsToFull (time) {
  let h = time / 60 / 60;
  if (h % 1 !== 0) {
    h = Math.trunc(time / 60 / 60);
    let hs = h * 60 * 60;
    let diff = time - hs;

    let m = diff / 60;

    if (m % 1 !== 0) {
      m = Math.trunc(diff / 60);
      let ms = m * 60;
      let rest = diff - ms;
      if (h < 10) h = `0${h}`;
      if (m < 10) m = `0${m}`;
      if (rest < 10) rest = `0${rest}`;
      return `${h}:${m}:${rest}`
    } else {
      if (h < 10) h = `0${h}`;
      if (m < 10) m = `0${m}`;
      return `${h}:${m}:00`;
    }

  } else {
    if (h < 10) h = `0${h}`;
    return `${h}:00:00`;
  }
}

a = fullToSeconds(a);
b = fullToSeconds(b);
c = fullToSeconds(c);

let gap;

if (a > c) {
  gap = Math.round(((86400 - a) + c) / 2);
} else {
  gap = Math.round((c - a) / 2);
}

b = b + gap;
if (b >= 86400) b -= 86400;
let res = secondsToFull(b);

fs.writeFileSync("output.txt", String(res));