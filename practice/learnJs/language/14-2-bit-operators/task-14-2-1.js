/*

Побитовый оператор и значение

Почему побитовые операции в примерах ниже не меняют число? Что они делают внутри?

alert( 123 ^ 0 ); // 123
alert( 0 ^ 123 ); // 123
alert( ~~123 ); // 123

*/

/*
Ответ:

^ - XOR оператор. При работе с ним, числа преобразуются в 32-ух битную, бинарную форму.

123..toString(2) // 00000000000000000000000001111011
0..toString(2)   // 00000000000000000000000000000000

Далее, идёт побитовое сравнение, если в одном из чисел бит равен 1, а во втором 0, то в результирующем числе будет 1.

Результат данной операции:

123 ^ 0 или 0 ^ 123 // 00000000000000000000000001111011

В десятичной форме это будет то же число 123, с побочным эффектом отброса дробной части, если она есть.

~ - Побитовое НЕ. Точно также число при работе с ним переводится в двоичную форму.

123..toString(2) // 00000000000000000000000001111011

Далее каждая 1 меняется на 0 и наоборот.

Результат после первой операции ~
11111111111111111111111110000100

Резульат после второй операции ~
00000000000000000000000001111011

В итоге число не изменилось, но как сайд-эффект, отбрасывается дробная часть, если она есть.

*/

