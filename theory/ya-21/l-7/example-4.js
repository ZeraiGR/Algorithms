// Сортировка событий

// На парковке в торговом центре N мест (занумерованных от 1 до N).
// За день в ТЦ приезжало M автомобилей, при этом некоторые из них
// длинные и занимали несколько подряд идущих парковочных мест.
// Для каждого автомобиля известно время приезда и отъезда, а также
// два числа - с какого по какое парковочное места он занимал.
// Если в какой-то момент времени один автомобиль уехал
// с парковочного места, то место считается освободившимся
// и в тот же момент времени на его место может встать другой.

// Необходимо определить, был ли момент, в который были заняты
// все парковочные места.

// Решение.
// События - приезд и отъезд автомобиля (причём отъезд должен
// происходить раньше). Будем поддерживать количество занятых мест
// и если после очередного события счётчик равен N, то такие моменты были

function isParkingFull (cars, n) {
	let events = [];
	for (const car of cars) {
		let [timein, timeout, placefrom, placeto] = car;
		// -1 (маркер для события о том, что машина уехала с парковки)
		// 1 (маркер для события о том, что машина приехала на парковку)
		events.push([timein, 1, placeto - placefrom + 1]);
		events.push([timeout, -1, placeto - placefrom + 1]);
	}
	events.sort();
	let occuoied = 0;
	for (let i = 0; i < events.length; i++) {
		if (events[i][1] === -1) {
			occuoied -= events[i][2];
		} else if (events[i][1] === 1) {
			occuoied += events[i][2];
		}
		if (occuoied === n) return true;
	}
	return false;
}
